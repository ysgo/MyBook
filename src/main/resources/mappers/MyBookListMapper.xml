<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybook.my.book.dao.NaverBookDAO">

	<!-- readBook -->	
	 <!-- search readBook -->
	 <select id="searchBookList"  parameterType="string" resultType="MyBookList">
    	select id, email, title, author, publisher, image, m_title, m_star, m_content, registdate from mybooklist where email = #{email} and (title like '%'||#{readkeyword}||'%' or author like '%'||#{readkeyword}||'%' or publisher like '%'||#{readkeyword}||'%')
    </select>
    
 	<!--rownum을 이용하여 id시퀀스 번호만큼 추출  -->
 	<select id="selectAllBookList" parameterType="MyBookList"  resultType="MyBookList">
    	select id, title, image, m_title, m_star, m_content,  registdate from 
    	(select id, title, image, m_title, m_star, m_content,  registdate, rownum rnum from 
    	(select * from mybooklist where email = #{email} order by registdate desc)) 
    	where rnum between #{start} and #{last}
 	</select>

	<select id="totalCnt" parameterType="String" resultType="int">
		select count(*) from mybooklist where email=#{email}
	</select>

  	<insert id="insertBookList"  parameterType="MyBookList">
  		<selectKey resultType="int" keyProperty="id" order="BEFORE">
      		select mybooklist_seq.nextval from dual     
    	</selectKey>  

    		insert into mybooklist(id, email, title, author, publisher, description, image, m_title, m_star, m_content,  registdate) values(#{id},#{email},#{title},#{author},#{publisher}, #{description}, #{image},#{m_title}, #{m_star}, #{m_content}, sysdate)
	</insert>	
	
	<delete id="deleteBookList" parameterType="MyBookList">
		delete from mybooklist where id = #{id} 
	</delete>
	
	<delete id="deleteAll" parameterType="String">
		delete from mybooklist where email = #{email}
	</delete>
	
	<update id="updateBookList" parameterType="MyBookList">
		update mybooklist set 
				m_title=#{m_title}, 
				m_star=#{m_star}, 
				m_content=#{m_content}, 
				registdate=sysdate
		where id=#{id}
	</update>
	
	<select id="trendingbook" resultType="MyBookList">
    	select title, author, publisher, description, image, total_by_title from 
    	(select title, author, publisher, description, image, sum(count(*)) over(partition by title) total_by_title from mybooklist group by title, author, publisher, description, image order by total_by_title desc) t 
    	LIMIT 5
<!--     	where rownum <![CDATA[<]]>=5 -->
    </select>
    
	<select id="countInterestBookList" parameterType="string" resultType="int">
  		select count(*) as total from interestbooklist where email = #{email}
	</select>

	<!-- select last registdate -->
	<select id="selectMyBookLastRegistDate" resultType="String">
		select max(registdate) KEEP(DENSE_RANK First ORDER BY registdate DESC) from mybooklist
 	</select>
 	
 	<select id="selectInterestLastRegistDate" resultType="String">
		select max(registdate) KEEP(DENSE_RANK First ORDER BY registdate DESC) from interestbooklist
 	</select>
	
	<!-- log -->
	<select id="selectLog" resultType="Log"><!--selectLog 변경-->
		select email, userName, myBookTitle, interestBookTitle, m_star, m_content, isupdate, logregistdate from log order by logregistdate desc
	</select>
 	
	<insert id="insertLog"  parameterType="Log">
		<selectKey resultType="int" keyProperty="id" order="BEFORE">
      		select mybooklist_seq.nextval from dual     
    	</selectKey> 
    	insert into log(id, email, userName, myBookTitle, interestBookTitle, m_star, m_content,logregistdate) 
    	values(#{id}, #{email}, #{userName},#{myBookTitle},#{interestBookTitle},#{m_star},#{m_content},  to_Date(#{logregistdate},'yyyy-MM-dd hh24:mi:ss'))
	</insert>
	
	<update id="updateLog" parameterType="Log">
		update log set 
				m_star=#{m_star}, 
				m_content=#{m_content}, 
				isupdate=#{isupdate},
				logregistdate=to_Date(#{logregistdate},'yyyy-MM-dd hh24:mi:ss')
		where id=#{id}
	</update>
	
	<update id="updateUserName" parameterType="Log">
		update log set 
				userName=#{userName}
		where email=#{email}
	</update>
	
	<delete id="deleteLog" parameterType="int">
		delete from log where id = #{id} 
	</delete> 
	
	<!-- 모든 활동기록 -->
	<select id="selectTotalLog" parameterType="Log" resultType="Log"><!--selectLog 변경-->
		select email, userName, myBookTitle, interestBookTitle, m_star, m_content, isupdate, logregistdate from (select email, userName, myBookTitle, interestBookTitle, 
		m_star, m_content, isupdate, logregistdate, rownum rnum from (select * from log order by logregistdate desc))
		where rnum between #{start} and #{last}
	</select>
	
	<select id="totalCntLog" resultType="int">
		select count(*) from log
	</select>
	
	<!-- interestBook -->
	 <select id="searchInterestbook"  parameterType="string" resultType="InterestBookList">
    	select id, email, title, author, publisher, description, image from interestbooklist where email = #{email} and (title like '%'||#{interestkeyword}||'%' or author like '%'||#{interestkeyword}||'%' or publisher like '%'||#{interestkeyword}||'%')
    </select>
	
	<select id="selectAllInterestBookList" parameterType="string"  resultType="InterestBookList">
    	select id, image, title, registdate from interestbooklist where email = #{email} order by id desc
 	</select>

  	<insert id="insertInterestBookList"  parameterType="InterestBookList">
  		<selectKey resultType="int" keyProperty="id" order="BEFORE">
      		select mybooklist_seq.nextval from dual     
    	</selectKey>  
    		insert into interestbooklist(id, email, title, author, publisher, description, image, registdate) values(#{id},#{email},#{title},#{author},#{publisher}, #{description}, #{image}, sysdate)
	</insert>	
	
	<delete id="deleteInterestBookList" parameterType="int">
		delete from interestbooklist where id = #{id} 
	</delete> 

	<!-- detailInterestBook -->
	<select id="selectDetailInterestBook" parameterType="int"  resultType="InterestBookList">
    	select id, image, title, author, publisher, description from interestbooklist where id = #{id}
	</select>
	
	<delete id="deleteAllInterestBook" parameterType="String">
		delete from interestbooklist where email = #{email} 
	</delete>

</mapper>